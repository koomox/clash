package clash

import (
	"encoding/base64"
	"github.com/koomox/ext"
)

type Config struct {
	rules   []byte
	prefix  []byte
	isValid bool
}

var (
	current   = &Config{isValid: false}
	rawRules  = ""
	rawPrefix = "eJxUkMFugzAMhu+R8g5W1Wvo6Napykts2mk7pmBaVjfJnEDH208hoWKKEObzL/LZwTXXoLzjqKF+2h+OUhgid1dkrIbOUEApbq5FDTwQSkHurAhHJA297ZwUvR9fH8nWBi0FAFpzInxgAGtuGJBH5LkPoKCuX6rVs+BjNZ/lM1LQu11rQ8XDaer6cKkaq4+H5yVwidGnSF3NJ0XVz4A8SSGFZ/fbY3ZSs4SGTWT3bewm/yBOHjVklEnRhG0uMswb2qZXASaEu+M2wVLmhiFvy4yz3n5Vx+iTZ7nn2nvVIEc1IvfdlCwGXKwndWY3+P/q7x9vn19r74CEzWK0mrXsrkz1FwAA//+AgYVJ"
)

func deCompress(raw string) (b []byte, err error) {
	if b, err = base64.RawStdEncoding.DecodeString(raw); err != nil {
		return
	}
	return ext.NewEncoding().DeCompress(b)
}

func Initial() {
	if current.isValid {
		return
	}
	b, err := deCompress(rawRules)
	if err != nil {
		return
	}
	current.rules = b
	if b, err = deCompress(rawPrefix); err != nil {
		return
	}
	current.prefix = b
	current.isValid = true
}
